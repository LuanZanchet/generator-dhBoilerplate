/* --------------------------------------------------

   DO NOT EDIT
   Calc max-width
   -------------------------------------------------- */

$maxWidth: $colWidth*$cols;



/* --------------------------------------------------

   Gutter
   -------------------------------------------------- */

@mixin gutter($i: 1) {
  padding-left: ($i * $gutter__width);
  padding-right: ($i * $gutter__width);
}



/* --------------------------------------------------

   Container
   @include container(); // full for 100%
   -------------------------------------------------- */

@mixin container($width: max) {
  width: 100%;
  @if $width != 'full' {
    max-width: $max__width;
  }
  @include clearfix();
}



/* --------------------------------------------------

   Cols
   Optional Setting to remove default gutter
   @include cols(x)
   -------------------------------------------------- */

@mixin cols($i) {
  float: left;
  width: ($i / $columns * 100%);
}



/* --------------------------------------------------

   Push the container by x cols
   -------------------------------------------------- */

@mixin push($i) {
  @if $i > 0 {
    margin-left: ((100 * $column__width * $i) / $max__width) + 0%;
  } @else if $i < 1 {
    margin-left: 0;
  }
}



/* --------------------------------------------------

   Pull the container by x cols
   -------------------------------------------------- */

@mixin pull($i) {
  @if $i > 0 {
    margin-right: ((100 * $column__width * $i) / $max__width) + 0%;
  } @else if $i < 1 {
    margin-right: 0;
  }
}



/* --------------------------------------------------

   Center Container
   -------------------------------------------------- */

@mixin center() {
  margin-left: auto;
  margin-right: auto;
}



/* --------------------------------------------------

   Breakpoints
   -------------------------------------------------- */

@mixin breakpoint($breakpoint,$direction: $mediaDirection) {

  @if map-has-key($breakpoints, $breakpoint) {
    @media (#{$direction}-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }

  @else if unitless($breakpoint) {
    $breakpoint: $breakpoint + 0px;

    @media (#{$direction}-width: $breakpoint) {
      @content;
    }
  }
}

@mixin breakpointV($breakpoint,$direction: $mediaDirection--v) {

  @if map-has-key($breakpoints--v, $breakpoint) {
    @media (#{$direction}-height: #{map-get($breakpoints--v, $breakpoint)}) {
      @content;
    }
  }

  @else if unitless($breakpoint) {
    $breakpoint: $breakpoint + 0px;

    @media (#{$direction}-height: $breakpoint) {
      @content;
    }
  }
}



/* --------------------------------------------------

   Clearfix
   -------------------------------------------------- */

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}



/* --------------------------------------------------

   Filter
   https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html
   grayscale      ex: filter: grayscale(100%);
   sepia          ex: filter: sepia(100%);
   saturate       ex: filter: saturate(0%);
   hue-rotate     ex: filter: hue-rotate(45deg);
   invert         ex: filter: invert(100%);
   brightness     ex: filter: brightness(15%);
   contrast       ex: filter: contrast(200%);
   blur           ex: filter: blur(2px);
   -------------------------------------------------- */


@mixin filter($filter-type,$filter-amount) {
  filter: $filter-type+unquote('(#{$filter-amount})');
}



/* --------------------------------------------------

   Vertical Align
   -------------------------------------------------- */

@mixin valign {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
}



/* --------------------------------------------------

   Responsive Type
   -------------------------------------------------- */

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid_type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;

      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  } @else {
    @error "Detected mixed units. Please use the same units for all parameters.";
  }
}

/*

  Usage:
  @include fluid-type(320px, 1680px, fontSize('m'), fontSize('xl'));

*/
